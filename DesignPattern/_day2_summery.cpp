/*
객체 지향 설계의 5대 원칙

OCP : 내부변경O, 인터페이스 변경X = > 외부 사용은 변경되지X
LSP : 치환법칙 - 리스코프 치환법칙, 부모의 정의와 동작은 자식에게서도 하위 호환
DIP : 의존관계 역전의 법칙(폴링 / 콜백 - 옵저버)

	----------------------------------------------------------------------------------------------
- 1일차 - "다른거 못봤어요."

객체 지향 디자인의 핵심 원리 1 : 공통성과 가변성의 분리

[변하는 것을 뽑아내는 기술]

1. 일반 함수에서 변하는 것 : 함수 인자로 뽑아낸다. 함수포인터
= > 변하는 정책의 인라인 치환을 고려한다면 함수객체 (sort)

2. 멤버 함수에서 변하는 것

A.변하는 것을 가상함수로(-Imp())												//상속
= > Template Method Pattern 재사용성이 떨어지며, 실행 시 교체 불가능하다.

B.변하는 것을 다른 클래스로													//포함
= > (1) 인터페이스 기반 교체 : 전략 패턴(Strategy Pattern)
실행 시 교체 가능, 느리다.
(LineEdit / IValidator)
(2) template 인자로 교체 : 단위 전략 패턴(Policy Base Pattern)
실행 시 교체 불가, 인라인 치환 가능, 빠르다.
(List<int, NoLock>)

----------------------------------------------------------------------------------------------
- 2일차 - "다른거 못봤어요. 앞으로 나와도 이거일거에요."

[Event 처리를 위한 이야기들..]
Callback 함수를 등록했다가 나중에 통보받자(DIP)

callback을 등록하는 두 가지 기술
1. 인터페이스 기반 Listener : java, 안드로이드앱, 타이젠
= > 객체를 등록하는 기법.함수 이름은 정의되어 있다.
관찰자 패턴(Observer pattern)

2. 함수포인터를 등록하는 기술 : ICommand, function<>
Ojective - C의 Selector
C#의 delegate
(NotificationCenter)



event 발생 시 여러 곳으로 event를 전달하는 패턴
"관찰자"	: 등록된 모든 객체에 이벤트 전달.
"책임의전가" : 첫 번째 객체가 처리하지 않은 경우 다음객체로 전달

지금까지 배운 GOF 6 / 23
Template Method							Pattern - 멤버 함수의 변하는 부분을 가상함수로 분리
Strategy								Pattern - 변하는 부분(정책 등에 따라)을 클래스로 분리
Observer								Pattern - 다른 객체의 이벤트 발생을 콜백인터페이스로 등록하여 통보받는다.
Chain Of Responsibility					Pattern - 이벤트 발생 시 이를 처리할 객체에게 재귀적으로 전달한다.
Adapter									Pattern - 설계된 클래스를 통해 다른 기능도 지원
Prototype								Pattern - 자기자신의 인스턴스 복제(clone) 함수를 지원하는 것은 유용하다.

*/