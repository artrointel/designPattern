// 6_도형편집기.cpp
#include <iostream>
#include <vector>
using namespace std;

// 도형 편집기로 배우는 객체지향 설계의 개념

// 1. 모든 도형을 타입화 하면 편리하다.
// 2. 모든 도형의 공통의 부모를 설계하면 모든 도형을 묶어서
//    관리 할수 있다.

// 3. 모든 도형의 공통의 특징은 반드시 부모로 부터 와야 한다.
//    그래야 부모 포인터로 자식을 묶어서 사용할때 해당 특징을
//    사용할수 있다.
//    LSP : Liskov Substitution Principle

// 4. 부모의 함수를 자식이 재정의 하게 된다면.. 반드시 가상함수
//    로 만들어야 한다.
//    "가상함수가 아니면 재정의하지말라" => Effective C++격언

class Shape
{
public:
	virtual void Draw() { cout << "Shape Draw" << endl; }
};
class Rect : public Shape
{
public:
	virtual void Draw() { cout << "Rect Draw" << endl; }
};
class Circle : public Shape
{
public:
	virtual void Draw() { cout << "Circle Draw" << endl; }
};

int main()
{
	vector<Shape*> v;

	while (1)
	{
		int cmd;
		cin >> cmd;

		// 1. OCP를 만족하도록 객체의 생성부분을 변경? Factory 패턴
		// 2. Undo/Redo 기능? Command 패턴

		if (cmd == 1) v.push_back(new Rect);
		else if (cmd == 2) v.push_back(new Circle);
		else if (cmd == 9)
		{
			for (int i = 0; i < v.size(); i++)
				v[i]->Draw();
		}
	}
}




